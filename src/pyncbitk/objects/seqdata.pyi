from collections.abc import Buffer
from typing import SupportsIndex, Tuple, Type, Union

from ..serial import Serial

ByteLike = Union[bytes, bytearray, memoryview]
ByteString = Union[str, ByteLike]

class SeqData(Serial):
    def __init__(self) -> None: ...
    def __copy__(self) -> SeqData: ...
    def complement(self, pack: bool = False) -> SeqData: ...
    def reverse_complement(self, pack: bool = False) -> SeqData: ...
    def copy(self, pack: bool = False) -> SeqData: ...

class SeqAaData(SeqData):
    def decode(self) -> str: ...

class SeqNaData(SeqData):
    def decode(self) -> str: ...

class IupacNaData(SeqNaData, Buffer):
    @staticmethod
    def encode(data: str) -> IupacNaData: ...
    def __init__(self, data: ByteString) -> None: ...
    def __reduce_ex__(
        self, protocol: SupportsIndex
    ) -> Tuple[Type[IupacNaData], bytes, None]: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __le__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __ge__(self, other: object) -> bool: ...
    def __buffer__(self, flags: int) -> memoryview: ...
    @property
    def length(self) -> int: ...
    @property
    def data(self) -> str: ...

class IupacAaData(SeqAaData, Buffer):
    @staticmethod
    def encode(data: str) -> IupacAaData: ...
    def __init__(self, data: ByteString) -> None: ...
    def __reduce_ex__(
        self, protocol: SupportsIndex
    ) -> Tuple[Type[IupacAaData], bytes, None]: ...
    def __repr__(self) -> str: ...
    def __buffer__(self, flags: int) -> memoryview: ...
    @property
    def length(self) -> int: ...
    @property
    def data(self) -> str: ...

class Ncbi2NaData(SeqNaData, Buffer):
    def __init__(self, data: ByteLike) -> None: ...
    def __reduce_ex__(
        self, protocol: SupportsIndex
    ) -> Tuple[Type[Ncbi2NaData], bytes, None]: ...
    def __repr__(self) -> str: ...
    def __buffer__(self, flags: int) -> memoryview: ...
    @property
    def data(self) -> bytes: ...

class Ncbi4NaData(SeqNaData, Buffer):
    def __init__(self, data: ByteLike) -> None: ...
    def __reduce_ex__(
        self, protocol: SupportsIndex
    ) -> Tuple[Type[Ncbi4NaData], bytes, None]: ...
    def __repr__(self) -> str: ...
    def __buffer__(self, flags: int) -> memoryview: ...
    @property
    def data(self) -> bytes: ...

class Ncbi8NaData(SeqNaData, Buffer):
    def __init__(self, data: ByteLike) -> None: ...
    def __reduce_ex__(
        self, protocol: SupportsIndex
    ) -> Tuple[Type[Ncbi8NaData], bytes, None]: ...
    def __repr__(self) -> str: ...
    def __buffer__(self, flags: int) -> memoryview: ...
    @property
    def data(self) -> bytes: ...

class NcbiPNaData(SeqNaData):
    pass

class Ncbi8AaData(SeqAaData):
    pass

class NcbiEAaData(IupacAaData):
    @staticmethod
    def encode(data: str) -> NcbiEAaData: ...
    def __init__(self, data: ByteString) -> None: ...
    @property
    def length(self) -> int: ...
    @property
    def data(self) -> str: ...
    def decode(self) -> str: ...

class NcbiPAaData(SeqAaData):
    pass

class NcbiStdAa(SeqAaData):
    pass

class GapData(SeqData):
    pass
